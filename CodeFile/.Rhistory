install.packages("quantmod")
library(quantmod)
#fetch dataset from online by doing getsymbol function
getSymbols("^GSPC", from=as.Date("2009-01-01"), to=as.Date("2020-12-31"), periodicity="daily")
# display dataset
View(GSPC)
#create time series by fetching adj_value with time
price_adj = GSPC$GSPC.Adjusted
# display timeseries
View(price_adj)
# now, perfome log return logic
# first we do difference. here we are able to doing difference because time series is daily basis.
# difference series gives return value which is store in ret object
ret = diff(log(price_adj))
View(ret)
ret
# ret has NA value so we removw those values
retn = ret[!is.na(ret)]
View(retn)
retn
# generate plot for more easly understand trend
title = "S&P 500: Return Value"
plot(retn, main = title, lty = "solid")
summary(retn)
install.packages("tseries")
library(tseries)
adf.test(retn)
acf(retn)
pacf(retn)
plot(ret)
retn
# generate plot for more easly understand trend
title = "S&P 500: Return Value"
plot(retn, main = title, lty = "solid")
plot(price_adj)
Box.test(retn)
Box.test(retn, type = "Ljung-Box")
Box.test(retn, lag = 10 ,type = "Ljung-Box")
#fetch dataset from online by doing getsymbol function
getSymbols("^GSPC", from=as.Date("2009-01-01"), to=as.Date("2020-12-31"), periodicity="daily")
# display dataset
View(GSPC)
#create time series by fetching adj_value with time
price_adj = GSPC$GSPC.Adjusted
# display time series and generate graph for more understand which has a trend or seasonality in series
View(price_adj)
plot(price_adj)
# now, perfome log return logic
# first we do difference. here we are able to doing difference because time series is daily basis.
# difference series gives return value which is store in ret object
# t_diff = (t) - (t-1)
#log = (t)/(t-1)
ret = diff(log(price_adj))
View(ret)
ret
plot(ret)
# ret has NA value so we removw those values
retn = ret[!is.na(ret)]
View(retn)
retn
# generate plot for more easly understand trend
title = "S&P 500: Return Value"
plot(retn, main = title, lty = "solid")
summary(retn)
install.packages("tseries")
install.packages("tseries")
library(tseries)
adf.test(retn)
acf(retn)
pacf(retn)
Box.test(retn, lag = 10 ,type = "Ljung-Box")
plot
install.packages("quantmod")
library(quantmod)
#fetch dataset from online by doing getsymbol function
getSymbols("^GSPC", from=as.Date("2009-01-01"), to=as.Date("2020-12-31"), periodicity="daily")
# display dataset
View(GSPC)
#create time series by fetching adj_value with time
price_adj = GSPC$GSPC.Adjusted
# display time series and generate graph for more understand which has a trend or seasonality in series
View(price_adj)
plot(price_adj)
# now, perfome log return logic
# first we do difference. here we are able to doing difference because time series is daily basis.
# difference series gives return value which is store in ret object
# t_diff = (t) - (t-1)
#log = (t)/(t-1)
ret = diff(log(price_adj))
View(ret)
ret
plot(ret)
# ret has NA value so we removw those values
retn = ret[!is.na(ret)]
View(retn)
retn
# generate plot for more easly understand trend
title = "S&P 500: Return Value"
plot(retn, main = title, lty = "solid")
summary(retn)
install.packages("tseries")
library(tseries)
adf.test(retn)
acf(retn)
pacf(retn)
Box.test(retn, lag = 10 ,type = "Ljung-Box")
Box.test(retn, type = "Ljung-Box")
Box.test(retn, lag = 10, type = "Ljung-Box")
adf.test(retn, alternative = (stationary))
adf.test(retn, alternative = c(stationary))
adf.test(retn, alternative = c("stationary"))
adf.test(retn, alternative = c("non-stationary"))
adf.test(retn, alternative = c("explosive"))
adf.test(retn, alternative = c("stationary"))
